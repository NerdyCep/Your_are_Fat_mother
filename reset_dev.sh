#!/usr/bin/env bash
set -euo pipefail

API_KEY="${API_KEY:-sk_live_0b85ac22a90a4019b0e79d07b672cf34}"
ADMIN_TOKEN="${ADMIN_TOKEN:-dev-admin}"

ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"
INFRA="$ROOT_DIR/infra"

echo "== üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker –∏ –¥–∞–Ω–Ω—ã—Ö Postgres =="
cd "$INFRA"
docker compose down -v || true
rm -rf ./postgres-data

echo "== üîß –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (postgres, kafka) =="
docker compose up -d --build postgres kafka

echo "== ‚è≥ –û–∂–∏–¥–∞—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Postgres..."
until docker compose exec -T postgres pg_isready -U postgres -d payments >/dev/null 2>&1; do
  sleep 1
done
echo "   Postgres OK"

echo "== ‚è≥ –û–∂–∏–¥–∞—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kafka..."
# –∂–¥—ë–º, –∫–æ–≥–¥–∞ —Å–∫—Ä–∏–ø—Ç—ã Kafka –∑–∞—Ä–∞–±–æ—Ç–∞—é—Ç
until docker compose exec -T kafka bash -lc "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"; do
  sleep 2
done
echo "   Kafka OK"

echo "== üóÉÔ∏è –°–æ–∑–¥–∞—é —Ç–µ–º—É Kafka 'payments' (–µ—Å–ª–∏ –Ω–µ—Ç)..."
docker compose exec -T kafka bash -lc "/opt/bitnami/kafka/bin/kafka-topics.sh --create \
  --topic payments --if-not-exists --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1" || true

echo "== üêç –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ API (–≤–∞–∂–Ω–æ: Dockerfile –≤ api/ –¥–æ–ª–∂–µ–Ω COPY . .)"
docker compose up -d --build api

echo "== üß± –ù–∞–∫–∞—Ç—ã–≤–∞—é —Å—Ö–µ–º—É –ë–î..."
docker compose exec -T postgres psql -U postgres -d payments -v ON_ERROR_STOP=1 <<'SQL'
CREATE TABLE IF NOT EXISTS merchants (
  id UUID PRIMARY KEY,
  webhook_url TEXT NOT NULL,
  api_secret TEXT NOT NULL,
  api_key TEXT UNIQUE
);
ALTER TABLE merchants ALTER COLUMN api_key SET NOT NULL;

CREATE TABLE IF NOT EXISTS payments (
  payment_id UUID PRIMARY KEY,
  merchant_id UUID REFERENCES merchants(id) ON DELETE SET NULL,
  amount INTEGER NOT NULL,
  currency TEXT NOT NULL,
  status TEXT NOT NULL,
  order_id TEXT,
  idempotency_key TEXT,
  created_at BIGINT NOT NULL,
  updated_at BIGINT NOT NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS payments_uniq_idem
  ON payments(merchant_id, idempotency_key) WHERE idempotency_key IS NOT NULL;

CREATE TABLE IF NOT EXISTS webhook_outbox (
  payment_id UUID PRIMARY KEY REFERENCES payments(payment_id) ON DELETE CASCADE,
  delivered BOOLEAN NOT NULL DEFAULT FALSE
);
SQL

echo "== üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ—Ä–≤–∏—Å—ã..."
docker compose up -d --build connector acquirer webhook_dispatcher merchant_webhook admin dashboard

echo "== ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ /health API"
curl -fsS http://localhost:8000/health && echo

echo "== üë§ –°–æ–∑–¥–∞—é –º–µ—Ä—á–∞–Ω—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º API_KEY (–∏–ª–∏ –ø–æ–ª—É—á–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)..."
set +e
CREATE_OUT=$(curl -s -X POST http://localhost:8000/admin-api/merchants \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d "{\"webhook_url\":\"http://merchant_webhook:8080/webhook\",\"api_secret\":\"secret\",\"api_key\":\"$API_KEY\"}")
RET=$?
set -e

if [[ $RET -ne 0 || "$CREATE_OUT" == *"Integrity error"* || "$CREATE_OUT" == *"409"* ]]; then
  echo "   –ú–µ—Ä—á–∞–Ω—Ç —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–∫"
else
  echo "   –°–æ–∑–¥–∞–Ω –º–µ—Ä—á–∞–Ω—Ç: $CREATE_OUT"
fi

echo "== üìã –¢–µ–∫—É—â–∏–µ –º–µ—Ä—á–∞–Ω—Ç—ã:"
curl -s -H "Authorization: Bearer $ADMIN_TOKEN" http://localhost:8000/admin-api/merchants | jq

echo "== üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ (–¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å processing)..."
curl -s -X POST http://localhost:8000/v1/payments \
  -H "Content-Type: application/json" \
  -H "X-API-Key: $API_KEY" \
  -H "Idempotency-Key: reset-check-$(date +%s)" \
  -d '{"amount":101,"currency":"USD","order_id":"ui"}' | jq

echo "== üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–ø–∏—Å–∏ –≤ –ë–î (TOP 5)..."
docker compose exec -T postgres psql -U postgres -d payments -c \
"SELECT payment_id, amount, currency, status, to_timestamp(created_at) AS created
 FROM payments ORDER BY created_at DESC LIMIT 5;"

echo "== üìä /admin-api/stats –Ω–∞–ø—Ä—è–º—É—é –∏ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏..."
curl -s -H "Authorization: Bearer $ADMIN_TOKEN" http://localhost:8000/admin-api/stats | jq
curl -s -H "Authorization: Bearer $ADMIN_TOKEN" http://localhost:8081/api/admin-api/stats | jq

echo "== ‚úÖ –ì–æ—Ç–æ–≤–æ. –û—Ç–∫—Ä–æ–π UI: http://localhost:8081/ (–≤–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω $ADMIN_TOKEN)"

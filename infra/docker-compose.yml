services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "bash -lc 'echo > /dev/tcp/localhost/9092'"]
      interval: 10s
      timeout: 3s
      retries: 6
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=payments
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d payments -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  api:
    build:
      context: ..              
      dockerfile: api/Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payments
      DB_USER: postgres
      DB_PASSWORD: postgres
      ADMIN_TOKEN: dev-admin
      KAFKA_BOOTSTRAP: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8000"   # API доступен с хоста по http://localhost:8080
    restart: unless-stopped

  connector:
    build:
      context: ../connector
    container_name: connector
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ACQUIRER_URL=http://acquirer:5000/process
    depends_on:
      kafka:
        condition: service_healthy
      api:
        condition: service_started
      acquirer:
        condition: service_started
    restart: unless-stopped

  acquirer:
    build:
      context: ../acquirer_simulator
    container_name: acquirer
    restart: unless-stopped

  webhook_dispatcher:
    build:
      context: ../webhook_dispatcher
    container_name: webhook_dispatcher
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/payments
      - MERCHANT_HMAC_SECRET=dev_secret
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command:
      - sh
      - -c
      - |
        python - <<'PY'
        import socket, time
        def wait(host, port, name):
            while True:
                s=socket.socket(); s.settimeout(2)
                try:
                    s.connect((host, port)); s.close()
                    print(f"[wait] {name} ready at {host}:{port}"); return
                except Exception as e:
                    print(f"[wait] {name} not ready: {e}"); time.sleep(1)
        wait("postgres", 5432, "postgres")
        wait("kafka", 9092, "kafka")
        PY
        python dispatcher.py
    restart: unless-stopped

  merchant_webhook:
    build:
      context: ../merchant_webhook
    container_name: merchant_webhook
    ports:
      - "8082:8080"   # чтобы не конфликтовать с api:8080
    restart: unless-stopped

  admin:
    build:
      context: ../admin
      dockerfile: Dockerfile
    container_name: admin
    environment:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@postgres:5432/payments
      ADMIN_USER: admin
      ADMIN_PASS: supersecret
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8001/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  dashboard:
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    container_name: dashboard
    depends_on:
      api:
        condition: service_started
    ports:
      - "8081:80"
    restart: unless-stopped

volumes:
  kafka_data:
